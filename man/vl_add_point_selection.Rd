% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzz_autogen_api.R
\name{vl_add_point_selection}
\alias{vl_add_point_selection}
\title{vl_add_point_selection}
\usage{
vl_add_point_selection(
  spec,
  name = NULL,
  select = NULL,
  bind = NULL,
  value = NULL,
  clear = NULL,
  encodings = NULL,
  fields = NULL,
  nearest = NULL,
  on = NULL,
  resolve = NULL,
  toggle = NULL,
  .object = NULL
)
}
\arguments{
\item{spec}{An input vega-lite spec}

\item{name}{Required. A unique name for the selection parameter. Selection names should be
valid JavaScript identifiers: they should contain only alphanumeric characters
(or "$", or "_") and may not start with a digit. Reserved keywords that may not
be used as parameter names are "datum", "event", "item", and "parent".}

\item{select}{Determines the default event processing and data query for the selection.
Vega-Lite currently supports two selection types:
\itemize{
\item \code{"point"} -- to select multiple discrete data values; the first value is
selected on \code{click} and additional values toggled on shift-click.
\item \code{"interval"} -- to select a continuous range of data values on \code{drag}.
}}

\item{bind}{When set, a selection is populated by input elements (also
known as dynamic query widgets) or by interacting with the
corresponding legend. Direct manipulation interaction is
disabled by default; to re-enable it, set the selection's
\href{https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties}{\code{on}}
property.

Legend bindings are restricted to selections that only specify a single field or
encoding.

Query widget binding takes the form of Vega's \href{https://vega.github.io/vega/docs/signals/#bind}{input element binding definition} or can be a mapping
between projected field/encodings and binding definitions.

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/bind.html}{\code{bind}}
documentation.}

\item{value}{Initialize the selection with a mapping between \href{https://vega.github.io/vega-lite/docs/selection.html#project}{projected channels or field names} and initial
values.

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/value.html}{\code{init}}
documentation.}

\item{clear}{Clears the selection, emptying it of all values. This property can be a \href{https://vega.github.io/vega/docs/event-streams/}{Event Stream} or \code{false} to disable
clear.

\strong{Default value:} \code{dblclick}.

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/selection.html#clear}{\code{clear} examples } in the
documentation.}

\item{encodings}{An array of encoding channels. The corresponding data field values must match
for a data tuple to fall within the selection.

\strong{See also:} The \href{https://vega.github.io/vega-lite/docs/selection.html#project}{projection with \code{encodings} and \code{fields} section} in the
documentation.}

\item{fields}{An array of field names whose values must match for a data tuple to fall within
the selection.

\strong{See also:} The \href{https://vega.github.io/vega-lite/docs/selection.html#project}{projection with \code{encodings} and \code{fields} section} in the
documentation.}

\item{nearest}{When true, an invisible voronoi diagram is computed to accelerate discrete
selection. The data value \emph{nearest} the mouse cursor is added to the selection.

\strong{Default value:} \code{false}, which means that data values must be interacted with
directly (e.g., clicked on) to be added to the selection.

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/selection.html#nearest}{\code{nearest} examples}
documentation.}

\item{on}{A \href{https://vega.github.io/vega/docs/event-streams/}{Vega event stream}
(object or selector) that triggers the selection. For interval
selections, the event stream must specify a \href{https://vega.github.io/vega/docs/event-streams/#between-filters}{start and end}.

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/selection.html#on}{\code{on} examples} in the
documentation.}

\item{resolve}{With layered and multi-view displays, a strategy that determines how selections'
data queries are resolved when applied in a filter transform, conditional
encoding rule, or scale domain.

One of:
\itemize{
\item \code{"global"} -- only one brush exists for the entire SPLOM. When the user begins
to drag, any previous brushes are cleared, and a new one is constructed.
\item \code{"union"} -- each cell contains its own brush, and points are highlighted if
they lie within \emph{any} of these individual brushes.
\item \code{"intersect"} -- each cell contains its own brush, and points are highlighted
only if they fall within \emph{all} of these individual brushes.
}

\strong{Default value:} \code{global}.

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/selection.html#resolve}{\code{resolve} examples} in the
documentation.}

\item{toggle}{Controls whether data values should be toggled (inserted or removed from a point
selection) or only ever inserted into multi selections.

One of:
\itemize{
\item \code{true} -- the default behavior, which corresponds to \code{"event.shiftKey"}. As
a result, data values are toggled when the user interacts with the shift-key
pressed.
\item \code{false} -- disables toggling behaviour; as the user interacts, data values are
only inserted into the multi selection and never removed.
\item A \href{https://vega.github.io/vega/docs/expressions/}{Vega expression} which is
re-evaluated as the user interacts. If the expression evaluates to \code{true}, the
data value is toggled into or out of the multi selection. If the expression
evaluates to \code{false}, the multi selection is first clear, and the data value is
then inserted. For example, setting the value to the Vega expression \code{"true"}
will toggle data values without the user pressing the shift-key.
}

\strong{Default value:} \code{true}

\strong{See also:} \href{https://vega.github.io/vega-lite/docs/selection.html#toggle}{\code{toggle} examples} in the
documentation.}

\item{.object}{Directly input an object, rather than creating one via the other arguments. Should not be used in conjunction with the other arguments other than \code{spec}. Objects can be of type: SelectionParameter}
}
\value{
A modified Vega-Lite Spec
}
\description{
Add a parameter for a point selection to a spec
}
